@startuml StateClass

    abstract class DungeonManager{

    }

    class StoryDungeonManager{

    }

    class GameBordManager{

    }

    interface I_DugeonObjectCreatable{
        + void CleateDungeon()
    }

    interface I_GameBordCheckable{
    }

    interface I_StoryGettable{
        + CharacterText GetCharacterText()
        + GetNextStoryData()
    }

    interface I_ResultGettable{
        + ResultData GetReultData
    }

    class ResultData{
        +int Trun
        +float Time
        +int ClearStage
        +bool IsClear
    }

    class GameTimer{
        -Subjct<float> measuredTimeSubject
    }

    interface I_TimeMeasurable{
        + IEnumlator StartMeasureTime()
        + void StopMeasureTime()
    }

    interface I_GameTimeGettable{
        +IObservable<float> measuredTimeAsync
    }



    class ResultManager{

    }

    class InitStagingState <<State>>{

    }

    class InGame <<State>>{

    }

    class Story <<State>>{

    }

    class Result <<State>>{

    }

    I_GameBordCheckable <|-up- GameBordManager

    GameTimer --|> I_TimeMeasurable
    GameTimer --|> I_GameTimeGettable

    InGame *-up-> I_TimeMeasurable
    InGame *--> I_GameBordCheckable

    InitStagingState *-up-> I_DugeonObjectCreatable

    DungeonManager --> I_DugeonObjectCreatable

    ResultManager *-up-> I_GameTimeGettable : Observe
    ResultManager *--> DungeonManager : Observe
    ResultManager --|> I_ResultGettable
    
    Result -up-> I_ResultGettable

    StoryDungeonManager --|> DungeonManager
    StoryDungeonManager --|> I_StoryGettable

    Story *-up-> I_StoryGettable



@enduml